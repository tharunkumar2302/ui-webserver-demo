components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        designation:
          type: string
        mobileNumber:
          type: string
        emailAddress:
          type: string
          format: email
          description: must be unique
        createdByUserId:
          type: string
        modifiedByUserId:
          type: string
        createdAt:
          type: date
        updatedAt:
          type: date
        organization:
          $ref: '#/components/schemas/Organization'
        password:
          type: string
          format: password
          minLength: 8
          description: At least one number and one letter
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
        createdByUserId: 5ebac534954b54139806c112
        modifiedByUserId: 5ebac534954b54139806c112
        createdAt: '2023-02-10T11:15:48.637+00:00'
        updatedAt: '2023-02-10T11:15:48.637+00:00'

    Resumes:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        name:
           type: String
        email:
           type: String
           format: email
        phone_no:
          type: String
        current_location:
          type: String
        marital_status:
          type: String
        present_address:
          type: String
        date_of_birth:
          type: String
        current_company:
          type: String
        experience:
          type: String
        education:
          type: String
        primary_skill:
          type: Array
        secondary_skill:
          type: String
        education_details:
          type: Array
        experience_details:
          type: Array
        current_ctc:
          type: String
        expected_ctc:
          type: String
        current_employment_status:
          type: tring
        industry:
          type: String
        notice_period:
          type: String
        prefered_location:
          type: String
        ready_to_relocate:
          type: String
        overseas_experience:
          type: String
        having_passport:
          type: String
        passport_validity:
          type: String
        visa:
          type: String
        file_path:
          type: String
        About:
          type: String
        createdByUserId:
          type: string
        modifiedByUserId:
          type: string


    JobOpening:
      type: object
      properties:
         department:
           type: String
         industryType:
           type: String
         responsibilities:
           type: String
         skillsRequired:
           type: String
         description:
           type: String
         organization:
           $ref: '#/components/schemas/Organization'
         qualification:
           type: String
         location:
           type: Array
         minExperience:
           type: Decimal128
         maxExperience:
           type: Decimal128
         jobRole:
           $ref: '#/components/schemas/JobRole'
         isActive:
           type: Boolean
           default: true
         employmentType:
           type: String
         duration:
           type: String
         workMode:
           type: String
         status:
           type: String
         tags:
           type: Array
         createdByUserId:
           type: String
         modifiedByUserId:
           type: String


    JobRole:
      type: object
      properties:
        name:
          type: string
          description: must be unique
        description:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        createdByUserId:
          type: string
        modifiedByUserId:
          type: string
        createdAt:
          type: date
        updatedAt:
          type: date
      example:
        id: 5ebac534954b54139806c112
        name: fake@example.com
        description: fake name
        createdByUserId: 5ebac534954b54139806c112
        modifiedByUserId: 5ebac534954b54139806c112
        createdAt: '2023-02-10T11:15:48.637+00:00'
        updatedAt: '2023-02-10T11:15:48.637+00:00'
    JobApplicant:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        jobApplication:
          $ref: '#/components/schemas/JobOpening'
        comments:
          type: string
        status:
          type: string
        isActive:
          type: string
        createdByUserId:
          type: date
        modifiedByUserId:
          type: date
      example:
        id: 5ebac534954b54139806c112
        user: fake@example.com
        jobApplication: fake name
        comments: 5ebac534954b54139806c112
        status: 5ebac534954b54139806c112
        isActive: '2023-02-10T11:15:48.637+00:00'
        modifiedByUserId: '2023-02-10T11:15:48.637+00:00'
        createdByUserId: '2023-02-10T11:15:48.637+00:00'
    SystemRoles:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          description: must be unique
        isDefault:
          type: string
        createdByUserId:
          type: string
        modifiedByUserId:
          type: string
        createdAt:
          type: date
        updatedAt:
          type: date
      example:
        id: 5ebac534954b54139806c112
        name: fake@example.com
        description: fake name
        createdByUserId: 5ebac534954b54139806c112
        modifiedByUserId: 5ebac534954b54139806c112
        createdAt: '2023-02-10T11:15:48.637+00:00'
        updatedAt: '2023-02-10T11:15:48.637+00:00'
    Organization:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          description: must be unique
        isDefault:
          type: string
        createdByUserId:
          type: string
        modifiedByUserId:
          type: string
        createdAt:
          type: date
        updatedAt:
          type: date
      example:
        id: 5ebac534954b54139806c112
        name: fake@example.com
        description: fake name
        createdByUserId: 5ebac534954b54139806c112
        modifiedByUserId: 5ebac534954b54139806c112
        createdAt: '2023-02-10T11:15:48.637+00:00'
        updatedAt: '2023-02-10T11:15:48.637+00:00'
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    DuplicateRole:
      description: Role already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Role already exists
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
